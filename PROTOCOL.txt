PROTOCOL:
Let S be a sequencer, let C be a client, and let A be all. 

Register:
When client enters the chat for the first time,
C->S reg:name
S retrives address (ip/port) from recvfrom
S multicasts notice to everybody except C
S->A msg:NOTICE name joined on ip:port
S adds C's address and name to address list
S->C reg:clientip:clientport:userlist
C prints joining info, followed by current user list
Done

Message:
C->S msg:Message
S gets name by client's address, and extracts Message
S->A msg:name:: Message

Update the list of clients (no leader info):
When client enters the chat and wants to register,
S->A upd:SequencerName:name1:ip1:port1:name2:ip2:port2:...:end
Each client updates their client list

Update leader info
S->A upl:name

Background:
-Every message that client receives has the following format:
"seq#:type:parameter1:parameter2:..." where seq# is a sequence number to keep track of messages, and type is the message type identifier. Note that sequence number is alreadys greater than 0. Sequence number 0 or less than 0 is meaningless and thereby can be ignored.
For example, "4:msg:Hello world." indicates that it wants to display message "Hello world." and its sequence number is 4.
-Every message that sequencer receives has the same message format as client, except that the message has no sequence number.
For example, "msg:Hello world." has equivalent meaning to the client message above.

Requrements
-User can start a new chat group

User will start as a sequencer.

Sequencer will bind to its own IP and port, and fork 3 threads: 1) InputThread, 2) ReceiveThread, and 3) KeepAliveThread.

InputThread will allow user to input messages via keyboard.
ReceiveThread receives messages and does operation based on the kind of messages it receives.

KeepAliveThread checks if clients remain connected to the chat by sending messages periodically.

-User can join an existing chat group (via sequencer)

User will start as a client.

Client, similar to sequencer, will fork 3 threads: 1) InputThread, 2) ReceiveThread, and 3) KeepAliveThread.

C->S: ("0:rec:%s", client_name). Client wants to register their name, ip, port to sequencer's client list. Sequencer number 0 will be ignored.

S->Cs: ("%d:msg:NOTICE %s joined on %s:%d\n", seq#, client_name, client_ip, client_port). Sequencer multicasts to notify clients that a new client just joined.

Clients display the notice.

Sequencer registers the client to the client list.

S->Cs: ("%d:upd:%s:%s:%s:%d:...:end", seq#, leader_name, client1_name, client1_ip, client1_port, ...). Sequencer multicasts information of client list so that client can update their client list.

Clients update their client list.

S->C: ("%d:res:%s:%d:%s", seq#, client_ip, client_port, client_list_in_string). Sequencer sends the client who just joined with information necessary to display clients information.

Client updates their ip and port, displays current users.

-User can join by connecting to any member of a the group they want to join

C->C: ("0:rec:%s", client_name). Client wants to register their name, ip, port to sequencer's client list via another client. Sequencer number 0 will be ignored.

C->C: ("0:red:%s:%s:%d", leader_name, leader_ip, leader_port). Client who is already in the chat redirects the client who wishes to join the chat by sending leader information.

C->S: ("rec:%s", client_name). With the leader information, client sends a request to join to sequencer. And from here, the rest is the same as joining the chat through sequencer.

-Deal with clients that crash and/or leave (is-alive mechanism)

S->Cs: ("0:kpa:KEEP_ALIVE"). periodically, sequencer sends a message.

C->S: ("kpa:ALIVE"). Client notifies sequencer proving its connectivity to the chat.

If sequencer doesn't hear from client, the client will be removed from client list.

S->Cs: ("%d:msg:NOTICE %s left the chat or crashed\n", seq#, removed_client).

S->Cs: ("%d:upd:%s:%s:%s:%d:...:end", seq#, leader_name, client1_name, client1_ip, client1_port, ...). Sequencer multicasts so that client can update their client list.

-Sequencer can leave the group (is-alive mechanism)

Client expects ("0:kpa:KEEP_ALIVE") message from sequencer. If they don't see it, they call for leader election.

-Leader election & Leader switch from client

Upon sequencer exits/crashes, each client calls for leader election. Since it is deterministic as to whoever has the name in the highest alphabetical order becomes a new leader, each client knows whether or not the client gets elected.

If elected, client closes the socket, and assumes the sequencer role.

S->Cs: ("%d:upd:%s:%s:%s:%d:...:end", seq#, leader_name, client1_name, client1_ip, client1_port, ...). Sequencer multicasts so that client can update their client list with the old sequencer removed.

S->Cs: ("%d:upl:%s", seq#, leader_name). Sequencer asks clients to update their leader information.

If not elected, client just stays as a client.

If not elected and supposely newly elected leader happens to crash or leave as well before updating clients with the up-to-date information, clients call for another leader election.

-Use get messages via multicast by sequencer

-fully ordered multicast protocol (based on a sequencer) via message queue
-Deal with lost/duplicate messages (both of message delivery and of other clients)
